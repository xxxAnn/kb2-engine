use crate::{Data, Item, game::message::GameMessage, Result, Error};

use super::{Summary, Summarize};


pub struct Exploit<'a> {
    data: &'a mut Data,
    userid: u64   
}

pub struct ExploitSummary {
    item_obtained: Item,
    quantity_obtained: u64
}

impl ExploitSummary {
    fn new(item_obtained: Item, quantity_obtained: u64) -> ExploitSummary {
        Self { 
            item_obtained,
            quantity_obtained
        }
    }
}

impl Summary for ExploitSummary {
    fn text(&self) -> String {
        format!("{}\r\n{}\r\n{}", "exploit_", self.quantity_obtained, self.item_obtained.to_string())
    }
}

impl<'a> Exploit<'a> {
    pub fn new(data: &'a mut Data, userid: u64) -> Self {
        Self {
            data,
            userid
        }
    }
}


impl<'a> Summarize<'a> for Exploit<'a> {
    type ResultSummary = ExploitSummary;

    fn call(self) -> Result<ExploitSummary> {
        let gamedata = self.data.gamedata();

        let mut map = self.data.map();

        let user = self.data.player_mut(self.userid)
            .ok_or(Error::CantCreateUser)?;

        let temp = user.exploit(&gamedata, &mut map)?;

        self.data.update_map(map)?;

        let res = temp
            .first()
            .ok_or("Exploit failed".to_owned())?;

        Ok(ExploitSummary::new(res.0.clone(), res.1))
    }

    fn from_message(data: &'a mut Data, gm: &GameMessage) -> Result<Self> {
        Ok(Exploit::new(data, gm.get_numeric_line(1)?))
    }
}

